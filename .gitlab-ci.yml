image: python:3.10-slim-buster

workflow:
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
      when: never
    - when: always

stages:
  - lint
  - test
  - build
  - docker
  - scan
  - publish

include:
  - template: Security/Container-Scanning.gitlab-ci.yml

variables:
  DOCKTER_IMAGE: $CI_REGISTRY_IMAGE/dockter

flake8:
  image: registry.gitlab.com/pipeline-components/flake8:latest
  stage: lint
  script:
    - flake8 src

dockter:
  image: $DOCKTER_IMAGE:latest
  stage: lint
  script:
    - dockter -d dockter.Dockerfile

pytest:
  stage: test
  script:
    - pip install pytest
    - cd tests
    - pytest

python-build:
  stage: build
  script:
    - apt-get update && apt-get install gettext-base
    - echo "Building version $CI_COMMIT_REF_NAME"
    - VERSION=$CI_COMMIT_REF_NAME envsubst < setup.cfg > tmp.cfg
    - pip install build
    - mv tmp.cfg setup.cfg
    - python -m build
  cache:
    key: build-cache-$CI_COMMIT_REF_NAME
    paths:
      - dist/
  rules:
    - if: $CI_COMMIT_REF_PROTECTED == 'true'

docker-build:
  image: docker:latest
  stage: docker
  services:
    - docker:dind
  before_script:
    - docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" $CI_REGISTRY
  script:
    - docker build -t $DOCKTER_IMAGE:$CI_COMMIT_SHA -f dockter.Dockerfile .
    - docker push $DOCKTER_IMAGE:$CI_COMMIT_SHA
  cache:
    key: build-cache-$CI_COMMIT_REF_NAME
    paths:
      - dist/
  rules:
    - if: $CI_COMMIT_REF_PROTECTED == 'true'

container_scanning:
  stage: scan
  variables:
    DOCKER_IMAGE: $DOCKTER_IMAGE:$CI_COMMIT_SHA
  rules:
    - if: $CI_COMMIT_REF_PROTECTED == 'true'

registry:
  image: docker:latest
  services:
    - docker:dind
  stage: publish
  variables:
    GIT_STRATEGY: none
  before_script:
    - docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" $CI_REGISTRY
  script:
    - docker pull $DOCKTER_IMAGE:$CI_COMMIT_SHA
    - docker tag $DOCKTER_IMAGE:$CI_COMMIT_SHA $DOCKTER_IMAGE:$CI_COMMIT_REF_NAME
    - docker tag $DOCKTER_IMAGE:$CI_COMMIT_SHA $DOCKTER_IMAGE:latest
    - docker push -a $DOCKTER_IMAGE
  rules:
    - if: $CI_COMMIT_REF_PROTECTED == 'true'

pypi-publish:
  stage: publish
  script:
    - pip install twine
    - TWINE_PASSWORD=${CI_JOB_TOKEN} TWINE_USERNAME=gitlab-ci-token python -m twine upload --repository-url ${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/packages/pypi dist/dockter-$CI_COMMIT_REF_NAME*
#    - TWINE_PASSWORD=${PYPI_TOKEN} TWINE_USERNAME=__token__ python -m twine upload dist/*
  cache:
    key: build-cache-$CI_COMMIT_REF_NAME
    paths:
      - dist/
  rules:
    - if: $CI_COMMIT_TAG
